{"version":3,"sources":["components/Business/Business.jsx","components/BusinessList/BusinessList.jsx","components/SearchBar/SearchBar.jsx","util/Yelp.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businessList","businesses","map","key","id","SearchBar","sortByOptions","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sboKey","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","Yelp","search","endpoint","fetch","headers","Authorization","then","response","ok","json","Error","json_response","image_url","address1","zip_code","categories","length","title","review_count","catch","networkError","console","error","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9fc6ad2f.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render() {\n        const business = this.props.business;\n        return (\n            <div className='Business'>\n                <div className='image-container'>\n                    <img src={business.imageSrc} alt='' />\n                </div>\n                <h2>{business.name}</h2>\n                <div className='Business-information'>\n                    <div className='Business-address'>\n                        <p>{business.address}</p>\n                        <p>{business.city}</p>\n                        <p>{business.state} {business.zipCode}</p>\n                    </div>\n                    <div className='Business-reviews'>\n                        <h3>{business.category.toUpperCase()}</h3>\n                        <h3 className=\"rating\">{business.rating} stars</h3>\n                        <p>{business.reviewCount} reviews</p>\n                    </div>\n                </div>\n            </div>);\n    }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business.jsx';\n\n\nclass BusinessList extends React.Component {\n    render() {\n        const businesses = this.props.businesses;\n        const businessList = businesses.map((business) => {\n            return (\n                <Business\n                    key={business.id}\n                    business={business}\n                />\n            )\n        });\n        return (\n            <div className='BusinessList'>\n                {businessList}\n            </div>\n        );\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        };\n\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match'\n        }\n\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    handleSortByChange(sortByOption) {\n        this.setState({ sortBy: sortByOption });\n    }\n\n    handleTermChange(event) {\n        this.setState({ term: event.target.value });\n    }\n\n    handleLocationChange(event) {\n        this.setState({ location: event.target.value });\n    }\n\n    handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        // TODO: Understand better what preventDefault does!\n        event.preventDefault();\n    }\n\n    getSortByClass(sortByOption) {\n        return (this.state.sortBy === sortByOption) ? 'active' : '';\n    }\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map((sboKey) => {\n            return (\n                <li\n                    key={sboKey}\n                    className={this.getSortByClass(this.sortByOptions[sboKey])}\n                    onClick={this.handleSortByChange.bind(this, this.sortByOptions[sboKey])}>\n                    {sboKey}\n                </li>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input\n                        placeholder=\"Search Businesses\"\n                        onChange={this.handleTermChange} />\n                    <input\n                        placeholder=\"Where?\"\n                        onChange={this.handleLocationChange} />\n                </div>\n                <div className=\"SearchBar-submit\" onClick={this.handleSearch}>\n                    <a>Let's Go</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","const apiKey = 'ie0yWMFWOtNXKPQlI0dPYJYtv-ucR5OwltFyamB_uei1GQ1s-xIYkyeke45Kd1V5fjE2IPPCljEU1hzncDbGHRQimD0cRvDaJfZ4elXyG0tZHwcEeTqiiv-CECYxX3Yx';\n\nconst Yelp = {};\n\nconst search = (term, location, sortBy) => {\n    const corsAnywhere = 'https://cors-anywhere.herokuapp.com/';\n    const endpoint = `https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`;\n    return fetch(corsAnywhere + endpoint,\n        {\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        })\n        .then((response) => {\n            if (response.ok) {\n                return response.json();\n            }\n            throw new Error('Request failed.');\n        })\n        .then((json_response) => {\n            if ('businesses' in json_response) {\n                return json_response.businesses.map((business) => {\n                    return {\n                        id: business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.address1,\n                        city: business.location.city,\n                        state: business.location.state,\n                        zipCode: business.location.zip_code,\n                        category: business.categories.length > 0 ? business.categories[0].title : '',\n                        rating: business.rating,\n                        reviewCount: business.review_count\n                    };\n                })\n            }\n            throw new Error('JSON response does not have the key \"businesses\".');\n        })\n        .catch((networkError) => {\n            console.error(networkError);\n        })\n}\n\nYelp.search = search;\n\nexport default Yelp;","import React from 'react';\nimport BusinessList from '../BusinessList/BusinessList.jsx';\nimport SearchBar from '../SearchBar/SearchBar.jsx';\nimport Yelp from '../../util/Yelp.jsx';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      businesses: []\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  async searchYelp(term, location, sortBy) {\n    const businesses = await Yelp.search(term, location, sortBy);\n    this.setState({ businesses: businesses });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import './index.css';\nimport './stylesheets/reset.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}